demo4 执行结果： 1 2 3
原因：异步的setTimeout 最后输出  所以3在后面
        A 虽然是最后执行  但是在异步之前 而且 b 在A里面 有process.nextTick （）属性  所以1在2的前面

demo7执行结果 同步读取、程序执行完毕、异步读取
原因：第一个是读取读取 所以浏览器会分给他一段内存读取，而浏览器同时会读取下面的文件
         所以第一个出来的应该是 同步读取的结果
	按顺序执行 所以第二个应该是程序执行完毕
	这时候才会到异步读取的结果 所以异步读取在最后
callkack.js执行结果  0 1
setTimeout（fun(){},0）导致程序成异步  所以printIt(); 是第一个执行的
 因为一开始c=0，所以function printIt(){console.log(c)};的结果为0
callback(） 有一个c+=1 所以此时c=1；所以callback(）输出的结果为1
io.js的执行结果 程序执行完毕  io.txt的内容
readFile是异步读取  所以先回执行console.log('程序执行完毕')  
	
	